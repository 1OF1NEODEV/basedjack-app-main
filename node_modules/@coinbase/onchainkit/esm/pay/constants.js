const GENERAL_PAY_ERROR_MESSAGE = 'PAY_ERROR';
const GENERIC_ERROR_MESSAGE = 'Something went wrong. Please try again.';
const NO_CONTRACTS_ERROR = 'Contracts are not available';
const NO_CONNECTED_ADDRESS_ERROR = 'No connected address';
const PAY_UNSUPPORTED_CHAIN_ERROR_MESSAGE = 'UNSUPPORTED_CHAIN';
const PAY_TOO_MANY_REQUESTS_ERROR_MESSAGE = 'PAY_TOO_MANY_REQUESTS_ERROR';
const PAY_INSUFFICIENT_BALANCE_ERROR = 'User has insufficient balance';
const PAY_INSUFFICIENT_BALANCE_ERROR_MESSAGE = priceInUSD => {
  return `You need at least ${priceInUSD} USDC to continue with payment`;
};
const PAY_INVALID_CHARGE_ERROR_MESSAGE = 'PAY_INVALID_CHARGE_ERROR';
const PAY_INVALID_PARAMETER_ERROR_MESSAGE = 'PAY_INVALID_PARAMETER_ERROR';
const UNCAUGHT_PAY_ERROR_MESSAGE = 'UNCAUGHT_PAY_ERROR';
const USER_REJECTED_ERROR = 'Request denied.';
let PayErrorCode = /*#__PURE__*/function (PayErrorCode) {
  PayErrorCode["INSUFFICIENT_BALANCE"] = "insufficient_balance";
  PayErrorCode["GENERIC_ERROR"] = "generic_error";
  PayErrorCode["UNEXPECTED_ERROR"] = "unexpected_error";
  PayErrorCode["USER_REJECTED_ERROR"] = "user_rejected";
  return PayErrorCode;
}({});
let PAY_LIFECYCLESTATUS = /*#__PURE__*/function (PAY_LIFECYCLESTATUS) {
  PAY_LIFECYCLESTATUS["FETCHING_DATA"] = "fetchingData";
  PAY_LIFECYCLESTATUS["INIT"] = "init";
  PAY_LIFECYCLESTATUS["PENDING"] = "paymentPending";
  PAY_LIFECYCLESTATUS["READY"] = "ready";
  PAY_LIFECYCLESTATUS["SUCCESS"] = "success";
  PAY_LIFECYCLESTATUS["ERROR"] = "error";
  return PAY_LIFECYCLESTATUS;
}({});
const USDC_ADDRESS_BASE = '0x833589fcd6edb6e08f4c7c32d4f71b54bda02913';
let CONTRACT_METHODS = /*#__PURE__*/function (CONTRACT_METHODS) {
  CONTRACT_METHODS["APPROVE"] = "approve";
  CONTRACT_METHODS["BALANCE_OF"] = "balanceOf";
  CONTRACT_METHODS["TRANSFER_TOKEN_PRE_APPROVED"] = "transferTokenPreApproved";
  return CONTRACT_METHODS;
}({});
const COMMERCE_ABI = [{
  type: 'function',
  name: 'transferTokenPreApproved',
  inputs: [{
    name: '_intent',
    type: 'tuple',
    components: [{
      name: 'recipientAmount',
      type: 'uint256'
    }, {
      name: 'deadline',
      type: 'uint256'
    }, {
      name: 'recipient',
      type: 'address'
    }, {
      name: 'recipientCurrency',
      type: 'address'
    }, {
      name: 'refundDestination',
      type: 'address'
    }, {
      name: 'feeAmount',
      type: 'uint256'
    }, {
      name: 'id',
      type: 'bytes16'
    }, {
      name: 'operator',
      type: 'address'
    }, {
      name: 'signature',
      type: 'bytes'
    }, {
      name: 'prefix',
      type: 'bytes'
    }]
  }],
  outputs: [],
  stateMutability: 'nonpayable'
}];
export { COMMERCE_ABI, CONTRACT_METHODS, GENERAL_PAY_ERROR_MESSAGE, GENERIC_ERROR_MESSAGE, NO_CONNECTED_ADDRESS_ERROR, NO_CONTRACTS_ERROR, PAY_INSUFFICIENT_BALANCE_ERROR, PAY_INSUFFICIENT_BALANCE_ERROR_MESSAGE, PAY_INVALID_CHARGE_ERROR_MESSAGE, PAY_INVALID_PARAMETER_ERROR_MESSAGE, PAY_LIFECYCLESTATUS, PAY_TOO_MANY_REQUESTS_ERROR_MESSAGE, PAY_UNSUPPORTED_CHAIN_ERROR_MESSAGE, PayErrorCode, UNCAUGHT_PAY_ERROR_MESSAGE, USDC_ADDRESS_BASE, USER_REJECTED_ERROR };
//# sourceMappingURL=constants.js.map
